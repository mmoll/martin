name: CI

on:
  push:
    branches: [ riscv ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  docker-build-test:
    name: Build and test docker images
    runs-on: ubuntu-latest
    env:
      # PG_* variables are used by psql
      PGDATABASE: test
      PGHOST: localhost
      PGUSER: postgres
      PGPASSWORD: postgres
      # TODO:  aarch64-unknown-linux-gnu
    services:
      postgres:
        image: postgis/postgis:16-3.5
        ports:
          - 5432/tcp
        options: >-
          -e POSTGRES_DB=test
          -e POSTGRES_USER=postgres
          -e POSTGRES_PASSWORD=postgres
          -e PGDATABASE=test
          -e PGUSER=postgres
          -e PGPASSWORD=postgres
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --entrypoint sh
          postgis/postgis:16-3.5
          -c "exec docker-entrypoint.sh postgres -c ssl=on -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key"

    steps:
      - uses: taiki-e/install-action@v2
        with: { tool: cross }
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          set-safe-directory: false
      - uses: Swatinem/rust-cache@v2
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
      - name: Init database
        run: tests/fixtures/initdb.sh
        env:
          PGPORT: ${{ job.services.postgres.ports[5432] }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        # https://github.com/docker/setup-qemu-action
        with:
          platforms: linux/amd64linux/riscv64
      - name: Set up gdal-bin and sqlite3-tools
        run: sudo apt-get update && sudo apt-get install -y gdal-bin sqlite3-tools
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # https://github.com/docker/setup-buildx-action
        with:
          install: true
          platforms: linux/amd64,linux/riscv64
      - name: Set up AWS SAM
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build targets
        run: |
          for target in "riscv64gc-unknown-linux-musl" "x86_64-unknown-linux-musl"; do
            echo -e "\n----------------------------------------------"
            echo "Building $target"
            rustup target add riscv64gc-unknown-linux-musl
            # See https://github.com/cross-rs/cross/issues/1526
            # TODO: Remove this once a version after cross 0.2.5 is released
            export CROSS_BUILD_OPTS="--output=type=docker"
            export "CARGO_TARGET_$(echo $target | tr 'a-z-' 'A-Z_')_RUSTFLAGS"='-C strip=debuginfo'
            cross build --release --target $target --workspace
            mkdir -p target_releases/$target
            mv target/$target/release/martin target_releases/$target
            mv target/$target/release/martin-cp target_releases/$target
            mv target/$target/release/mbtiles target_releases/$target
          done

      - name: Save cross-build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cross-build
          path: target_releases/*
      - name: Reorganize artifacts for docker build
        run: |
          mkdir -p target_releases/linux/riscv64gc
          mv target_releases/riscv64gc-unknown-linux-musl/* target_releases/linux/riscv64/
          mkdir -p target_releases/linux/amd64
          mv target_releases/x86_64-unknown-linux-musl/* target_releases/linux/amd64/
      - name: Start NGINX
        uses: nyurik/action-setup-nginx@v1.1
        id: nginx
        with: { port: '5412', output-unix-paths: 'yes' }
      - name: Copy static files
        run: cp -r tests/fixtures/pmtiles2/* ${{ steps.nginx.outputs.html-dir }}
      - name: Build linux/riscv64 Docker image
        uses: docker/build-push-action@v6
        # https://github.com/docker/build-push-action
        with:
          context: .
          file: .github/files/multi-platform.Dockerfile
          load: true
          tags: ${{ github.repository }}:linux-riscv64
          platforms: linux/riscv64

      - name: Build linux/amd64 Docker image
        uses: docker/build-push-action@v6
        # https://github.com/docker/build-push-action
        with:
          context: .
          file: .github/files/multi-platform.Dockerfile
          load: true
          tags: ${{ github.repository }}:linux-amd64
          platforms: linux/amd64
      - name: Test linux/amd64 Docker image
        run: |
          PLATFORM=linux/amd64
          TAG=${{ github.repository }}:linux-amd64
          export MARTIN_BUILD_ALL=-
          export MARTIN_BIN="docker run --rm --net host --platform $PLATFORM -e DATABASE_URL -v $PWD/tests:/tests $TAG"
          export MARTIN_CP_BIN="docker run --rm --net host --platform $PLATFORM -e DATABASE_URL -v $PWD/tests:/tests --entrypoint /usr/local/bin/martin-cp $TAG"
          export MBTILES_BIN="docker run --rm --net host --platform $PLATFORM -e DATABASE_URL -v $PWD/tests:/tests --entrypoint /usr/local/bin/mbtiles $TAG"
          tests/test.sh
        env:
          DATABASE_URL: postgres://${{ env.PGUSER }}:${{ env.PGUSER }}@${{ env.PGHOST }}:${{ job.services.postgres.ports[5432] }}/${{ env.PGDATABASE }}?sslmode=require

      - name: Save test output (on error)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-test-output-docker
          path: |
            tests/output/*
            target/test_logs/*
          retention-days: 5

      - name: Login to GitHub Docker registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        # https://github.com/docker/login-action
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        # https://github.com/docker/metadata-action
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Push the Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .github/files/multi-platform.Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/riscv64

  package:
    name: Package
    runs-on: ubuntu-latest
    needs: [ docker-build-test ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Download build artifact build-x86_64-unknown-linux-gnu
        uses: actions/download-artifact@v4
        with:
          name: build-x86_64-unknown-linux-gnu
          path: target/x86_64-unknown-linux-gnu

      - name: Download cross-build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cross-build
          path: target/cross

      - name: Download build artifact build-debian-x86_64
        uses: actions/download-artifact@v4
        with:
          name: build-debian-x86_64
          path: target/debian-x86_64

      - name: Package
        run: |
          set -x

          cd target
          mkdir files
          mv cross/* .

          cd x86_64-unknown-linux-gnu
          chmod +x martin martin-cp mbtiles
          tar czvf ../files/martin-x86_64-unknown-linux-gnu.tar.gz martin martin-cp mbtiles
          cd ..

          cd riscv64gc-unknown-linux-musl
          chmod +x martin martin-cp mbtiles
          tar czvf ../files/martin-riscv64gc-unknown-linux-musl.tar.gz martin martin-cp mbtiles
          cd ..

          cd x86_64-unknown-linux-musl
          chmod +x martin martin-cp mbtiles
          tar czvf ../files/martin-x86_64-unknown-linux-musl.tar.gz martin martin-cp mbtiles
          cd ..

          #
          # Special case for Debian .deb package
          #
          cd debian-x86_64
          mv debian-x86_64.deb ../files/martin-Debian-x86_64.deb
          cd ..

      - name: Publish
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: 'target/files/*'
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # This final step is needed to mark the whole workflow as successful
  # Don't change its name - it is used by the merge protection rules
  done:
    name: CI Finished
    runs-on: ubuntu-latest
    needs: [ package ]
    steps:
      - name: Finished
        run: echo "CI finished successfully"
